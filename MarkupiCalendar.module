<?php

/**
 * ProcessWire Markup iCalendar Module 0.1
 *
 * Given a PageArray of pages, this module will render an iCalendar feed from them. 
 * This is intended to be used directly from a template file. See usage below.
 *
 * The module uses the excellent iCalcreator library from http://www.kigkonsult.se/iCalcreator/
 * for creating the ICS feed itself and as such mostly just acts as a simple wrapper.
 *
 * USAGE
 * -----
 * $ics = $modules->get("MarkupiCalendar"); 
 * $ics->title = "Upcoming Events";
 * $ics->description = "Some upcoming events";
 * $ics->itemDateField = 'date';
 * $today = time();
 * $items = $pages->find("template=event, limit=30, sort=date, date>$today"); // or any pages you want
 * $ics->render($items); 
 *
 * See also the $defaultConfigData below (first thing in the class) to see what
 * options you can change at runtime. 
 *
 * 
 * Copyright (C) 2011 by Stephen Tomlinson
 * This module is licensed under Apache License v2.0, see LICENSE.TXT within the module folder.
 * The iCalcreator library is licensed under the LPGL
 * 
 * http://twitter.com/ffub
 *
 */
 
require_once("iCalcreator/iCalcreator.class.php");

class MarkupiCalendar extends WireData implements Module {

	protected static $defaultConfigData = array(
		'title' => 'Untitled iCal Feed',
		'url' => '', 
		'description' => '', 
		'itemSummaryField' => 'title',
		'itemDescriptionField' => 'summary',
		'itemLocationField' => false,
		'itemStartDateField' => 'created',
		'itemEndDateField' => false,
		'feedPages' => array(),
		'timezone' => false
	); 

	/**
	 * Return general info about the module for ProcessWire
	 *
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Markup iCalendar', 
			'version' => 001, 
			'summary' => 'Renders an iCalendar feed. Given a PageArray, renders an iCalendar feed of events based on the pages.',
			'permanent' => false, 
			'singular' => false, 
			'autoload' => false, 
			);
	}

	/**
	 * Set the default config data
	 *
	 */
	public function __construct() {
		foreach(self::$defaultConfigData as $key => $value) {
			$this->set($key, $value); 
		}
	}

	/**
	 * Necessary to fulfill Module interface, even though not using it currently
	 *
	 */
	public function init() {
		if(!$this->timezone) $this->timezone = $this->config->timezone;
	}

	/**
	 * Return the date as an array (possibly use getdate?)
	 *
	 */
	protected function ical_date($date) {
		$r = array(
			'year' => (int) date("Y",$date),
			'month' => (int) date("m",$date),
			'day' => (int) date("d",$date),
			'hour' => (int) date("H",$date),
			'min' => (int) date("i",$date),
			'sec' => (int) date("s",$date)
		);
		return $r;
	}
	
	/**
	 * Create the iCal feed
	 *
	 */	 
	protected function createFeed(PageArray $feedPages = null) {
		
		// Create the calendar feed
		$config = array("unique_id" => $_SERVER['SERVER_NAME']);
		$vcalendar = new vcalendar($config);
		$vcalendar->setProperty("method","PUBLISH");
		$vcalendar->setProperty("x-wr-calname",$this->title);
		$vcalendar->setProperty("x-wr-caldesc",$this->description);
		$vcalendar->setProperty("x-wr-timezone",$this->timezone);
			
		// Add events
		foreach($feedPages as $event) {
			$vevent = & $vcalendar->newComponent('vevent');
			$vevent->setProperty('last-modified', $this->ical_date($event->modified));
			$vevent->setProperty('created', $this->ical_date($event->created));
			$vevent->setProperty('dtstart', $this->ical_date($event->getUnformatted($this->itemStartDateField)),array("VALUE" => "DATE"));
			if($event->get($this->itemEndDateField))
				$vevent->setProperty('dtend', $this->ical_date($event->getUnformatted($this->itemEndDateField)),array("VALUE" => "DATE"));
			if($event->get($this->itemLocationField))
				$vevent->setProperty('location',$event->get($this->itemLocationField));
			$vevent->setProperty('summary',$event->get($this->itemSummaryField));
			$vevent->setProperty('description',$event->get($this->itemDescriptionField));
			$vevent->setProperty('url', $event->httpUrl);
		}
		
		$this->vcal = $vcalendar;
		return true;
		
	}

	/**
	 * Return the feed
	 *
	 */
	public function renderFeed(PageArray $feedPages = null) {

		if(!is_null($feedPages)) $this->feedPages = $feedPages;
		$this->createFeed($feedPages);
		$cal = $this->vcal->createCalendar();
		return $cal; 
 
	}

	/**
	 * Echo the feed this (with proper http headers)
	 *
	 */
	public function render(PageArray $feedPages = null) {
		
		if(!is_null($feedPages)) $this->feedPages = $feedPages;
		$this->createFeed($feedPages);
		$cal = $this->vcal->returnCalendar();
		return true; 
	}

}


